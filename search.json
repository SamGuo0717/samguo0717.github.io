[{"title":"Hello World","url":"/2025/07/21/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"应该填的坑","url":"/2025/07/21/to_do_list/","content":"刚面完了meta知道该刷leetcode啦！！！！I.这里留给刷过的leetcode和解题思路展示1.anagram - array &#x2F; hash table &#x2F; string &#x2F; sorting如何从一堆数中找到anagram\nfrom collections import defaultdictdef group_anagrams(strs):    d = defaultdict(list)    for s in strs:        key = &#x27;&#x27;.join(sorted(s))  # 或用频率数组转成 tuple/string        d[key].append(s)    return list(d.values())\n\n\n\n题号\n名称\n难度\n模式\n技巧\n\n\n\n49\nGroup Anagrams\nMedium\n多字符串列表\nsort &#x2F; hash by frequency\n\n\n438\nFind All Anagrams in a String\nMedium\n字符串滑窗\n滑动窗口 + frequency map\n\n\n2.simplify path - string &#x2F; stack处理path*这里可以拓展成模仿cd处理def cd(cwd,pwd)\ndef cd_resolve(cwd: str, path: str) -&gt; str:    # 将 cwd 拆分推入栈（忽略空和 &#x27;.&#x27;，处理父级 &#x27;..&#x27;）    stack = []    for part in cwd.split(&#x27;/&#x27;):        if not part or part == &#x27;.&#x27;:            continue        if part == &#x27;..&#x27;:            if stack:                stack.pop()        else:            stack.append(part)    # 处理 path 参数    if path.startswith(&#x27;/&#x27;):        stack = []    for part in path.split(&#x27;/&#x27;):        if not part or part == &#x27;.&#x27;:            continue        if part == &#x27;..&#x27;:            if stack:                stack.pop()        else:            stack.append(part)    return &#x27;/&#x27; + &#x27;/&#x27;.join(stack)\n\n\n\n题号\n题目名称\n难度\n技术点 &#x2F; 考察内容\n\n\n\n71（变体）\nSimplify Path + 当前目录支持\nMedium\n栈：处理 cwd 初始化 + 相对&#x2F;绝对路径入栈与出栈。模拟 cd cwd path，主考栈操作。\n\n\n588\nDesign In-Memory File System\nHard\nTrie &#x2F; 树 + 栈：模拟 ls、mkdir、addContentToFile、readContentFromFile，目录树遍历和路径拆分\n\n\n(进一步延伸)\nShell 命令完整模拟\nHard+\n多功能支持：cd、ls、pwd、符号链、环境变量。可在 588 基础上扩展，涉及更复杂的数据结构。\n\n\nII.这里留给需要增加的安全知识点SQL Injection（如何找注入点）（高级payload）（RBAC for DB）\nXSS - 注意能绕过的mXSS(XSS 具体危害)（可以执行什么）\nCSRF SSRF(samesite,SOP,CORS)(file:&#x2F;&#x2F; gopher:&#x2F;&#x2F;)\n其他注入安全设计比如说一个登录页面III.Control Matrix 部分 先从ASVS看吧A_PLACEHODER_HERE","categories":["杂谈"],"tags":["综述","leetcode","安全","碎碎念"]},{"title":"About Linux","url":"/2025/07/21/Linux/","content":"Vim 常用命令参考模式切换\n\n\n命令\n功能\n\n\n\ni\n进入插入模式（当前位置）\n\n\nI\n进入插入模式（行首）\n\n\na\n进入插入模式（当前位置后）\n\n\nA\n进入插入模式（行尾）\n\n\no\n新建下一行并进入插入模式\n\n\nO\n新建上一行并进入插入模式\n\n\nEsc\n退出插入模式到普通模式\n\n\n:\n进入命令模式\n\n\nv\n进入可视模式\n\n\nV\n进入行可视模式\n\n\n光标移动\n\n\n命令\n功能\n\n\n\nh\n左移\n\n\nj\n下移\n\n\nk\n上移\n\n\nl\n右移\n\n\nw\n下一个单词开头\n\n\nb\n上一个单词开头\n\n\ne\n单词结尾\n\n\n0\n行首\n\n\n$\n行尾\n\n\ngg\n文件开头\n\n\nG\n文件结尾\n\n\nCtrl+f\n向下翻页\n\n\nCtrl+b\n向上翻页\n\n\n编辑操作\n\n\n命令\n功能\n\n\n\nx\n删除当前字符\n\n\ndd\n删除当前行\n\n\nyy\n复制当前行\n\n\np\n粘贴到下方\n\n\nP\n粘贴到上方\n\n\nu\n撤销\n\n\nCtrl+r\n重做\n\n\ndw\n删除单词\n\n\ncw\n修改单词\n\n\ncc\n修改整行\n\n\n搜索替换\n\n\n命令\n功能\n\n\n\n/text\n向下搜索text\n\n\n?text\n向上搜索text\n\n\nn\n下一个匹配\n\n\nN\n上一个匹配\n\n\n:s/old/new\n替换当前行第一个old为new\n\n\n:s/old/new/g\n替换当前行所有old为new\n\n\n:%s/old/new/g\n替换全文所有old为new\n\n\n文件操作\n\n\n命令\n功能\n\n\n\n:w\n保存\n\n\n:q\n退出\n\n\n:wq\n保存并退出\n\n\n:q!\n强制退出不保存\n\n\n:w filename\n另存为\n\n\n:e filename\n打开文件\n\n\n行号与跳转\n\n\n命令\n功能\n\n\n\n:set nu\n显示行号\n\n\n:set nonu\n隐藏行号\n\n\n:n\n跳转到第n行\n\n\nnG\n跳转到第n行\n\n\n窗口操作\n\n\n命令\n功能\n\n\n\n:sp\n水平分割窗口\n\n\n:vsp\n垂直分割窗口\n\n\nCtrl+w w\n切换窗口\n\n\nCtrl+w q\n关闭当前窗口\n\n\n实用技巧# 以只读模式打开vim -R filename# 打开文件并跳转到指定行vim +n filename# 同时编辑多个文件vim file1 file2:n        # 下一个文件:prev     # 上一个文件\n","categories":["Linux"],"tags":["linux"]}]