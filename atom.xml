<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PenguinSam&#39;s world</title>
  
  
  <link href="http://samguo0717.github.io/atom.xml" rel="self"/>
  
  <link href="http://samguo0717.github.io/"/>
  <updated>2025-07-21T21:54:59.569Z</updated>
  <id>http://samguo0717.github.io/</id>
  
  <author>
    <name>Sam Kaku</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://samguo0717.github.io/2025/07/21/hello-world/"/>
    <id>http://samguo0717.github.io/2025/07/21/hello-world/</id>
    <published>2025-07-21T21:54:59.569Z</published>
    <updated>2025-07-21T21:54:59.569Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>代码审计(1)</title>
    <link href="http://samguo0717.github.io/2025/07/21/code-review-1/"/>
    <id>http://samguo0717.github.io/2025/07/21/code-review-1/</id>
    <published>2025-07-21T12:06:20.000Z</published>
    <updated>2025-07-22T03:59:52.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP代码审计-部分摘自PL"><a href="#PHP代码审计-部分摘自PL" class="headerlink" title="PHP代码审计 部分摘自PL"></a>PHP代码审计 部分摘自PL</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$parts</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;jwt&#x27;</span>]);</span><br><span class="line"><span class="variable">$algorithms</span> = <span class="keyword">array</span>(<span class="string">&#x27;HS256&#x27;</span>, <span class="string">&#x27;HS384&#x27;</span>, <span class="string">&#x27;HS512&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">3</span> !== <span class="title function_ invoke__">count</span>(<span class="variable">$parts</span>)) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\InvalidArgumentException</span>(<span class="string">&#x27;Invalid or malformed JWT supplied.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$header</span> = <span class="title function_ invoke__">json_decode</span>(<span class="built_in">self</span>::<span class="title function_ invoke__">decode</span>(<span class="variable">$parts</span>[<span class="number">0</span>]), <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$header</span>[<span class="string">&#x27;alg&#x27;</span>], <span class="variable">$algorithms</span>)) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Possible Threat Analysis</p></blockquote><h3 id="Algorithm-Confusion"><a href="#Algorithm-Confusion" class="headerlink" title="Algorithm Confusion"></a>Algorithm Confusion</h3><p>攻击者只检查了HS系列算法</p><h4 id="HS算法"><a href="#HS算法" class="headerlink" title="HS算法"></a>HS算法</h4><h3 id="RS256-to-HS256降级攻击"><a href="#RS256-to-HS256降级攻击" class="headerlink" title="RS256 to HS256降级攻击"></a>RS256 to HS256降级攻击</h3><blockquote><p>得同时存在RS256和HS256</p></blockquote><blockquote><p>攻击原理<br>HS256替换RS256以后<br>RS256<br>签名：使用RSA私钥 + SHA256<br>验证：使用RSA公钥 + SHA256<br>HS256<br>签名：使用HMAC + SHA256 + 共享密钥<br>验证：使用HMAC + SHA256 + 相同的共享密钥</p></blockquote><h4 id="A-获取RSA公钥"><a href="#A-获取RSA公钥" class="headerlink" title="A. 获取RSA公钥"></a>A. 获取RSA公钥</h4><p>常见端点:</p><ul><li>&#x2F;.well-known&#x2F;jwks.json</li><li>证书文件</li><li>API文档</li><li>之前的合法JWT Token分析</li></ul><h4 id="B-构造恶意JWT"><a href="#B-构造恶意JWT" class="headerlink" title="B. 构造恶意JWT"></a>B. 构造恶意JWT</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始合法的RS256 JWT header:</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;alg&quot;</span>: <span class="string">&quot;RS256&quot;</span>,</span><br><span class="line">  <span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 攻击者修改为HS256:</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>, </span><br><span class="line">  <span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恶意payload (攻击者可以任意修改):</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;admin&quot;</span>,      <span class="comment">// 提升为管理员</span></span><br><span class="line">  <span class="string">&quot;role&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  <span class="string">&quot;exp&quot;</span>: <span class="number">9999999999</span>    <span class="comment">// 延长过期时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-使用公钥作为HMAC密钥签名"><a href="#C-使用公钥作为HMAC密钥签名" class="headerlink" title="C. 使用公钥作为HMAC密钥签名"></a>C. 使用公钥作为HMAC密钥签名</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 攻击者的签名过程:</span></span><br><span class="line"><span class="variable">$publicKey</span> = <span class="string">&quot;-----BEGIN PUBLIC KEY-----\nMIIBI...&quot;</span>; <span class="comment">// 获得的RSA公钥</span></span><br><span class="line"><span class="variable">$header</span> = <span class="title function_ invoke__">base64url_encode</span>(<span class="string">&#x27;&#123;&quot;alg&quot;:&quot;HS256&quot;,&quot;typ&quot;:&quot;JWT&quot;&#125;&#x27;</span>);</span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">base64url_encode</span>(<span class="string">&#x27;&#123;&quot;sub&quot;:&quot;admin&quot;,&quot;role&quot;:&quot;admin&quot;&#125;&#x27;</span>);</span><br><span class="line"><span class="variable">$signature</span> = <span class="title function_ invoke__">hash_hmac</span>(<span class="string">&#x27;sha256&#x27;</span>, <span class="variable">$header</span>.<span class="string">&#x27;.&#x27;</span>.<span class="variable">$payload</span>, <span class="variable">$publicKey</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$maliciousJWT</span> = <span class="variable">$header</span>.<span class="string">&#x27;.&#x27;</span>.<span class="variable">$payload</span>.<span class="string">&#x27;.&#x27;</span>.<span class="title function_ invoke__">base64url_encode</span>(<span class="variable">$signature</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时服务器端有相关漏洞代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存在漏洞的验证代码:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verifyJWT</span>(<span class="params"><span class="variable">$jwt</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$parts</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$jwt</span>);</span><br><span class="line">    <span class="variable">$header</span> = <span class="title function_ invoke__">json_decode</span>(<span class="title function_ invoke__">base64url_decode</span>(<span class="variable">$parts</span>[<span class="number">0</span>]), <span class="literal">true</span>);</span><br><span class="line">    <span class="variable">$payload</span> = <span class="title function_ invoke__">json_decode</span>(<span class="title function_ invoke__">base64url_decode</span>(<span class="variable">$parts</span>[<span class="number">1</span>]), <span class="literal">true</span>);</span><br><span class="line">    <span class="variable">$signature</span> = <span class="title function_ invoke__">base64url_decode</span>(<span class="variable">$parts</span>[<span class="number">2</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 漏洞: 服务器根据JWT中声明的算法进行验证</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$header</span>[<span class="string">&#x27;alg&#x27;</span>] === <span class="string">&#x27;RS256&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 正常情况: 使用公钥验证RS256签名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">openssl_verify</span>(<span class="variable">$parts</span>[<span class="number">0</span>].<span class="string">&#x27;.&#x27;</span>.<span class="variable">$parts</span>[<span class="number">1</span>], <span class="variable">$signature</span>, <span class="variable">$publicKey</span>, OPENSSL_ALGO_SHA256);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">elseif</span> (<span class="variable">$header</span>[<span class="string">&#x27;alg&#x27;</span>] === <span class="string">&#x27;HS256&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 漏洞: 如果JWT声明是HS256，服务器用公钥作为HMAC密钥验证</span></span><br><span class="line">        <span class="comment">// 这正是攻击者想要的!</span></span><br><span class="line">        <span class="variable">$expectedSignature</span> = <span class="title function_ invoke__">hash_hmac</span>(<span class="string">&#x27;sha256&#x27;</span>, <span class="variable">$parts</span>[<span class="number">0</span>].<span class="string">&#x27;.&#x27;</span>.<span class="variable">$parts</span>[<span class="number">1</span>], <span class="variable">$publicKey</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">hash_equals</span>(<span class="variable">$signature</span>, <span class="variable">$expectedSignature</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="D-攻击成功条件"><a href="#D-攻击成功条件" class="headerlink" title="D. 攻击成功条件"></a>D. 攻击成功条件</h4><ul><li>服务器信任JWTheader中的算法生命</li><li>同时支持RS256和HS256suanfa</li><li>使用相同的密钥材料进行验证</li><li>攻击者能够获得RSA公钥</li><li>没有严格区分不同算法的密钥管理</li></ul><p>e.g.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 1. 原始合法的RS256 JWT:</span><br><span class="line">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyIiwicm9sZSI6InVzZXIifQ.[RS256_signature]</span><br><span class="line"></span><br><span class="line">// 2. 攻击者构造的HS256 JWT:</span><br><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyIiwicm9sZSI6ImFkbWluIn0.[HS256_signature_using_public_key]</span><br><span class="line"></span><br><span class="line">// 服务器会用公钥验证HS256签名 -&gt; 验证通过!</span><br><span class="line">// 攻击者成功获得admin权限</span><br></pre></td></tr></table></figure><h4 id="E-如何防护"><a href="#E-如何防护" class="headerlink" title="E. 如何防护"></a>E. 如何防护</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 强制指定算法，不信任JWT header</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verifyJWT</span>(<span class="params"><span class="variable">$jwt</span>, <span class="variable">$expectedAlgorithm</span> = <span class="string">&#x27;RS256&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 忽略JWT中声明的算法，使用预设算法</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$expectedAlgorithm</span> !== <span class="string">&#x27;RS256&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;Only RS256 allowed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 强制使用RS256验证...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 算法白名单严格验证</span></span><br><span class="line"><span class="variable">$allowedAlgorithms</span> = [<span class="string">&#x27;RS256&#x27;</span>]; <span class="comment">// 不包含HS256</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$header</span>[<span class="string">&#x27;alg&#x27;</span>], <span class="variable">$allowedAlgorithms</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;Algorithm not allowed&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 分离不同算法的密钥</span></span><br><span class="line"><span class="variable">$rsaKeys</span> = [...];    <span class="comment">// RS256专用</span></span><br><span class="line"><span class="variable">$hmacKeys</span> = [...];   <span class="comment">// HS256专用，绝不混用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="缺省JSON格式验证"><a href="#缺省JSON格式验证" class="headerlink" title="缺省JSON格式验证"></a>缺省JSON格式验证</h3><h3 id="输入来源问题"><a href="#输入来源问题" class="headerlink" title="输入来源问题"></a>输入来源问题</h3>]]></content>
    
    
    <summary type="html">code review 101</summary>
    
    
    
    <category term="代码审计" scheme="http://samguo0717.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="安全" scheme="http://samguo0717.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>About Linux</title>
    <link href="http://samguo0717.github.io/2025/07/21/Linux/"/>
    <id>http://samguo0717.github.io/2025/07/21/Linux/</id>
    <published>2025-07-21T07:29:47.000Z</published>
    <updated>2025-07-21T22:31:47.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vim-常用命令参考"><a href="#Vim-常用命令参考" class="headerlink" title="Vim 常用命令参考"></a>Vim 常用命令参考</h1><h2 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>i</code></td><td>进入插入模式（当前位置）</td></tr><tr><td><code>I</code></td><td>进入插入模式（行首）</td></tr><tr><td><code>a</code></td><td>进入插入模式（当前位置后）</td></tr><tr><td><code>A</code></td><td>进入插入模式（行尾）</td></tr><tr><td><code>o</code></td><td>新建下一行并进入插入模式</td></tr><tr><td><code>O</code></td><td>新建上一行并进入插入模式</td></tr><tr><td><code>Esc</code></td><td>退出插入模式到普通模式</td></tr><tr><td><code>:</code></td><td>进入命令模式</td></tr><tr><td><code>v</code></td><td>进入可视模式</td></tr><tr><td><code>V</code></td><td>进入行可视模式</td></tr></tbody></table><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>h</code></td><td>左移</td></tr><tr><td><code>j</code></td><td>下移</td></tr><tr><td><code>k</code></td><td>上移</td></tr><tr><td><code>l</code></td><td>右移</td></tr><tr><td><code>w</code></td><td>下一个单词开头</td></tr><tr><td><code>b</code></td><td>上一个单词开头</td></tr><tr><td><code>e</code></td><td>单词结尾</td></tr><tr><td><code>0</code></td><td>行首</td></tr><tr><td><code>$</code></td><td>行尾</td></tr><tr><td><code>gg</code></td><td>文件开头</td></tr><tr><td><code>G</code></td><td>文件结尾</td></tr><tr><td><code>Ctrl+f</code></td><td>向下翻页</td></tr><tr><td><code>Ctrl+b</code></td><td>向上翻页</td></tr></tbody></table><h2 id="编辑操作"><a href="#编辑操作" class="headerlink" title="编辑操作"></a>编辑操作</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>x</code></td><td>删除当前字符</td></tr><tr><td><code>dd</code></td><td>删除当前行</td></tr><tr><td><code>yy</code></td><td>复制当前行</td></tr><tr><td><code>p</code></td><td>粘贴到下方</td></tr><tr><td><code>P</code></td><td>粘贴到上方</td></tr><tr><td><code>u</code></td><td>撤销</td></tr><tr><td><code>Ctrl+r</code></td><td>重做</td></tr><tr><td><code>dw</code></td><td>删除单词</td></tr><tr><td><code>cw</code></td><td>修改单词</td></tr><tr><td><code>cc</code></td><td>修改整行</td></tr></tbody></table><h2 id="搜索替换"><a href="#搜索替换" class="headerlink" title="搜索替换"></a>搜索替换</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>/text</code></td><td>向下搜索text</td></tr><tr><td><code>?text</code></td><td>向上搜索text</td></tr><tr><td><code>n</code></td><td>下一个匹配</td></tr><tr><td><code>N</code></td><td>上一个匹配</td></tr><tr><td><code>:s/old/new</code></td><td>替换当前行第一个old为new</td></tr><tr><td><code>:s/old/new/g</code></td><td>替换当前行所有old为new</td></tr><tr><td><code>:%s/old/new/g</code></td><td>替换全文所有old为new</td></tr></tbody></table><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>:w</code></td><td>保存</td></tr><tr><td><code>:q</code></td><td>退出</td></tr><tr><td><code>:wq</code></td><td>保存并退出</td></tr><tr><td><code>:q!</code></td><td>强制退出不保存</td></tr><tr><td><code>:w filename</code></td><td>另存为</td></tr><tr><td><code>:e filename</code></td><td>打开文件</td></tr></tbody></table><h2 id="行号与跳转"><a href="#行号与跳转" class="headerlink" title="行号与跳转"></a>行号与跳转</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>:set nu</code></td><td>显示行号</td></tr><tr><td><code>:set nonu</code></td><td>隐藏行号</td></tr><tr><td><code>:n</code></td><td>跳转到第n行</td></tr><tr><td><code>nG</code></td><td>跳转到第n行</td></tr></tbody></table><h2 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>:sp</code></td><td>水平分割窗口</td></tr><tr><td><code>:vsp</code></td><td>垂直分割窗口</td></tr><tr><td><code>Ctrl+w w</code></td><td>切换窗口</td></tr><tr><td><code>Ctrl+w q</code></td><td>关闭当前窗口</td></tr></tbody></table><h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以只读模式打开</span></span><br><span class="line">vim -R filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件并跳转到指定行</span></span><br><span class="line">vim +n filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时编辑多个文件</span></span><br><span class="line">vim file1 file2</span><br><span class="line">:n        <span class="comment"># 下一个文件</span></span><br><span class="line">:prev     <span class="comment"># 上一个文件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">把不懂的command都扔上来吧</summary>
    
    
    
    <category term="Linux" scheme="http://samguo0717.github.io/categories/Linux/"/>
    
    
    <category term="linux" scheme="http://samguo0717.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>应该填的坑</title>
    <link href="http://samguo0717.github.io/2025/07/21/to_do_list/"/>
    <id>http://samguo0717.github.io/2025/07/21/to_do_list/</id>
    <published>2025-07-21T07:00:00.000Z</published>
    <updated>2025-07-22T03:57:07.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="刚面完了meta知道该刷leetcode啦！！！！"><a href="#刚面完了meta知道该刷leetcode啦！！！！" class="headerlink" title="刚面完了meta知道该刷leetcode啦！！！！"></a>刚面完了meta知道该刷leetcode啦！！！！</h2><h3 id="I-这里留给刷过的leetcode和解题思路展示"><a href="#I-这里留给刷过的leetcode和解题思路展示" class="headerlink" title="I.这里留给刷过的leetcode和解题思路展示"></a>I.这里留给刷过的leetcode和解题思路展示</h3><p>1.anagram - array &#x2F; hash table &#x2F; string &#x2F; sorting<br><a href="https://leetcode.com/problems/group-anagrams/description/">如何从一堆数中找到anagram</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">group_anagrams</span>(<span class="params">strs</span>):</span><br><span class="line">    d = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">        key = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">sorted</span>(s))  <span class="comment"># 或用频率数组转成 tuple/string</span></span><br><span class="line">        d[key].append(s)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(d.values())</span><br></pre></td></tr></table></figure><p>变体anagram mappings &#x2F; interchange the key and value for the dict<br><a href="https://leetcode.com/problems/find-anagram-mappings/description/">key-value转转</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">anagramMappings</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="comment">## use a dict as a mappint</span></span><br><span class="line">        <span class="comment"># Input: nums1 = [12,28,46,32,50], nums2 = [50,12,32,46,28]</span></span><br><span class="line">        <span class="comment"># Output: [1,4,3,2,0]</span></span><br><span class="line"></span><br><span class="line">        hashmap = defaultdict(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">## 0,1,2,3,4 -&gt; 50,12,32,46,28</span></span><br><span class="line">        <span class="keyword">for</span> index,val <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums2):</span><br><span class="line">            hashmap[val] = index</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 0,1,2,3,4 -&gt; 12,28,46,32,50</span></span><br><span class="line">        <span class="keyword">for</span> index,val <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums1):</span><br><span class="line">            nums1[index] = hashmap[val]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> nums1</span><br></pre></td></tr></table></figure><table><thead><tr><th>题号</th><th>名称</th><th>难度</th><th>模式</th><th>技巧</th></tr></thead><tbody><tr><td>49</td><td>Group Anagrams</td><td>Medium</td><td>多字符串列表</td><td>sort &#x2F; hash by frequency</td></tr><tr><td>438</td><td>Find All Anagrams in a String</td><td>Medium</td><td>字符串滑窗</td><td>滑动窗口 + frequency map</td></tr></tbody></table><p>2.simplify path - string &#x2F; stack<br><a href="https://leetcode.com/problems/simplify-path/">处理path</a><br>*这里可以拓展成模仿cd处理def cd(cwd,pwd)</p><p>原题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">simplify_path</span>(<span class="params">path</span>):</span><br><span class="line">components = [comp <span class="keyword">for</span> comp <span class="keyword">in</span> path.split(<span class="string">&quot;/&quot;</span>) <span class="keyword">if</span> comp <span class="keyword">and</span> comp != <span class="string">&quot;.&quot;</span>]</span><br><span class="line">cd_stack = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> component <span class="keyword">in</span> components:</span><br><span class="line"><span class="keyword">if</span> component == <span class="string">&quot;..&quot;</span>:</span><br><span class="line"><span class="comment">#返回上级目录，但是不能超过根目录</span></span><br><span class="line"><span class="keyword">if</span> stack:</span><br><span class="line">stack.pop()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">stack.append(component)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;/&#x27;</span>.join(stack)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从已知目录开始查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##多加一步 处理路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mock_cd</span>(<span class="params">cwd,path</span>):</span><br><span class="line"><span class="keyword">if</span> path.startswith(<span class="string">&quot;/&quot;</span>):</span><br><span class="line">target_path = path</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">target_path = cwd + <span class="string">&#x27;/&#x27;</span> + path</span><br><span class="line"><span class="comment">##剩下相同</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>题号</th><th>题目名称</th><th>难度</th><th>技术点 &#x2F; 考察内容</th></tr></thead><tbody><tr><td>71（变体）</td><td>Simplify Path + 当前目录支持</td><td>Medium</td><td><strong>栈</strong>：处理 <code>cwd</code> 初始化 + 相对&#x2F;绝对路径入栈与出栈。模拟 <code>cd cwd path</code>，主考栈操作。</td></tr><tr><td>588</td><td>Design In-Memory File System</td><td>Hard</td><td><strong>Trie &#x2F; 树 + 栈</strong>：模拟 <code>ls</code>、<code>mkdir</code>、<code>addContentToFile</code>、<code>readContentFromFile</code>，目录树遍历和路径拆分</td></tr><tr><td>(进一步延伸)</td><td>Shell 命令完整模拟</td><td>Hard+</td><td>多功能支持：<code>cd</code>、<code>ls</code>、<code>pwd</code>、符号链、环境变量。可在 588 基础上扩展，涉及更复杂的数据结构。</td></tr></tbody></table><p>3.Diameter of Binary Tree - Tree &#x2F; Binary Tree &#x2F; DFS<br><a href="https://leetcode.com/problems/diameter-of-binary-tree/description/?envType=company&envId=facebook&favoriteSlug=facebook-thirty-days">算深度</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## [1,2,3,4,5] -&gt; 3</span></span><br><span class="line"><span class="comment">## [1,2] -&gt; 1</span></span><br><span class="line">Class TreeNode:</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,val=<span class="number">0</span>,left=<span class="literal">None</span>,right=<span class="literal">None</span></span>):</span><br><span class="line"><span class="variable language_">self</span>.val = val</span><br><span class="line"><span class="variable language_">self</span>.left = left</span><br><span class="line"><span class="variable language_">self</span>.right = right</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">diameterOfBinaryTree</span>(<span class="params">self,root:<span class="type">Optional</span> [TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">root</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">l = dfs(root.left)</span><br><span class="line">r = dfs(root.right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">nonlocal</span> res</span><br><span class="line">res = <span class="built_in">max</span>(res, l+r)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>(l,r)</span><br><span class="line"></span><br><span class="line">dfs(root)</span><br><span class="line"><span class="comment">##这里return的res真正的直径，dfs的return只是给上一次用的</span></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>题号</th><th>题目名称</th><th>难度</th><th>DFS返回值</th><th>全局记录</th><th>核心计算公式</th><th>解题思路</th></tr></thead><tbody><tr><td><strong>543</strong></td><td>二叉树的直径</td><td>Easy</td><td>节点深度</td><td>最大直径</td><td><code>left_depth + right_depth</code></td><td>在计算深度过程中，用左右子树深度之和更新最大直径</td></tr><tr><td><strong>687</strong></td><td>最长同值路径</td><td>Medium</td><td>同值路径长度</td><td>最长同值路径</td><td><code>left_len + right_len</code></td><td>只有当前节点值与子节点相同时才能延续路径，否则重置为0</td></tr><tr><td><strong>124</strong></td><td>二叉树中的最大路径和</td><td>Hard</td><td>最大路径贡献</td><td>最大路径和</td><td><code>node.val + left_gain + right_gain</code></td><td>每个节点可选择是否包含子树贡献（负数不要），返回单侧最大贡献</td></tr><tr><td><strong>563</strong></td><td>二叉树的坡度</td><td>Easy</td><td>子树节点和</td><td>总坡度</td><td><code>abs(left_sum - right_sum)</code></td><td>计算每个节点的坡度（左右子树和的差的绝对值），累加到全局</td></tr><tr><td><strong>110</strong></td><td>平衡二叉树</td><td>Easy</td><td>树高度&#x2F;-1</td><td>是否平衡</td><td><code>abs(left_height - right_height) &gt; 1</code></td><td>高度差&gt;1时返回-1表示不平衡，否则返回正常高度</td></tr><tr><td><strong>968</strong></td><td>二叉树摄像头</td><td>Hard</td><td>节点状态(0&#x2F;1&#x2F;2)</td><td>摄像头数量</td><td>状态转移逻辑</td><td>0:需要覆盖，1:有摄像头，2:被覆盖，根据子节点状态决定当前状态</td></tr><tr><td><strong>366</strong></td><td>寻找二叉树的叶子节点</td><td>Medium</td><td>节点高度</td><td>叶子节点分层</td><td><code>max(left_height, right_height) + 1</code></td><td>按照到叶子节点的距离分层，距离相同的为一层</td></tr><tr><td><strong>508</strong></td><td>出现次数最多的子树和</td><td>Medium</td><td>子树和</td><td>频次统计</td><td><code>left_sum + right_sum + node.val</code></td><td>计算每个子树和并统计频次，返回出现最多次数的子树和</td></tr></tbody></table><h3 id="II-这里留给需要增加的安全知识点"><a href="#II-这里留给需要增加的安全知识点" class="headerlink" title="II.这里留给需要增加的安全知识点"></a>II.这里留给需要增加的安全知识点</h3><h4 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h4><p>（如何找注入点）<br>（高级payload）<br>（RBAC for DB）</p><h4 id="XSS-注意能绕过的mXSS"><a href="#XSS-注意能绕过的mXSS" class="headerlink" title="XSS - 注意能绕过的mXSS"></a>XSS - 注意能绕过的mXSS</h4><p>(XSS 具体危害)<br>（可以执行什么）</p><h4 id="CSRF-SSRF"><a href="#CSRF-SSRF" class="headerlink" title="CSRF SSRF"></a>CSRF SSRF</h4><p>(samesite,SOP,CORS)<br>(file:&#x2F;&#x2F; gopher:&#x2F;&#x2F;)</p><h4 id="其他注入"><a href="#其他注入" class="headerlink" title="其他注入"></a>其他注入</h4><h4 id="Crypto-reduce-security-policy-through-incorrect-ciphers-and-algorithms-decision-lead-to-data-disclosure-and-manipulation"><a href="#Crypto-reduce-security-policy-through-incorrect-ciphers-and-algorithms-decision-lead-to-data-disclosure-and-manipulation" class="headerlink" title="Crypto - reduce security policy through incorrect ciphers and algorithms decision lead to data disclosure and manipulation"></a>Crypto - reduce security policy through incorrect ciphers and algorithms decision lead to data disclosure and manipulation</h4><p>1.Do not use cryptography if there is no sensitive data to protect</p><p>1.1 No implementation</p><ul><li>Missed something intuitive: No encryption, no access control</li><li>Missed something non-intuitive: No MAC, side-channel leakage, no replay prevention</li></ul><p>1.2 Understanding<br>1.3 Mistake</p><h4 id="安全设计"><a href="#安全设计" class="headerlink" title="安全设计"></a>安全设计</h4><h5 id="比如说一个登录页面"><a href="#比如说一个登录页面" class="headerlink" title="比如说一个登录页面"></a>比如说一个登录页面</h5><h3 id="III-Control-Matrix-部分-先从ASVS看吧"><a href="#III-Control-Matrix-部分-先从ASVS看吧" class="headerlink" title="III.Control Matrix 部分 先从ASVS看吧"></a>III.Control Matrix 部分 先从ASVS看吧</h3><h5 id="A-PLACEHODER-HERE"><a href="#A-PLACEHODER-HERE" class="headerlink" title="A_PLACEHODER_HERE"></a>A_PLACEHODER_HERE</h5>]]></content>
    
    
    <summary type="html">第一篇☝️</summary>
    
    
    
    <category term="杂谈" scheme="http://samguo0717.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="安全" scheme="http://samguo0717.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="综述" scheme="http://samguo0717.github.io/tags/%E7%BB%BC%E8%BF%B0/"/>
    
    <category term="leetcode" scheme="http://samguo0717.github.io/tags/leetcode/"/>
    
    <category term="碎碎念" scheme="http://samguo0717.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
</feed>
